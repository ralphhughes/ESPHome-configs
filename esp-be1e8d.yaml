esphome:
  name: esp-be1e8d
  comment: Back bedroom (clock)
  on_boot:
      priority: -200  # Ensure this runs after boot
      then:
        - stepper.set_target:
            id: my_stepper
            target: !lambda 'return id(stepper_position);'
  
esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  - platform: esphome
    password: ""

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  - ssid: !secret wifi_ssid2
    password: !secret wifi_password2
  domain: .home

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap: {}
  

captive_portal:

i2c:
  sda: D2
  scl: D1
  scan: True
  

preferences:
  flash_write_interval: 1min  # Adjust as needed to prevent frequent writes

globals:
  - id: stepper_position
    type: int
    restore_value: yes
    initial_value: '0'

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"
    on_time:
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_week: MON
        then:
          - stepper.set_target:
              id: my_stepper
              target: !lambda 'return 292;'
          - globals.set:
              id: stepper_position
              value: '292'
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_week: TUE
        then:
          - stepper.set_target:
              id: my_stepper
              target: !lambda 'return 585;'
          - globals.set:
              id: stepper_position
              value: '585'
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_week: WED
        then:
          - stepper.set_target:
              id: my_stepper
              target: !lambda 'return 878;'
          - globals.set:
              id: stepper_position
              value: '878'
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_week: THU
        then:
          - stepper.set_target:
              id: my_stepper
              target: !lambda 'return 1170;'
          - globals.set:
              id: stepper_position
              value: '1170'
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_week: FRI
        then:
          - stepper.set_target:
              id: my_stepper
              target: !lambda 'return 1463;'
          - globals.set:
              id: stepper_position
              value: '1463'
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_week: SAT
        then:
          - stepper.set_target:
              id: my_stepper
              target: !lambda 'return 1755;'
          - globals.set:
              id: stepper_position
              value: '1755'
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_week: SUN
        then:
          - stepper.set_target:
              id: my_stepper
              target: !lambda 'return 2048;'
          - globals.set:
              id: stepper_position
              value: '2048'

number:
  - platform: template
    name: Stepper Control
    min_value: -1024
    max_value: 1024
    step: 1
    set_action:
      then:
        - stepper.set_target:
            id: my_stepper
            target: !lambda 'return x;'
        - globals.set:
            id: stepper_position
            value: !lambda 'return x;'
  - platform: template
    name: Stepper Angle
    min_value: 0
    max_value: 360
    step: 5
    set_action:
      then:
        - stepper.set_target:
            id: my_stepper
            target: !lambda 'return -x * 5.69f;'
        - globals.set:
            id: stepper_position
            value: !lambda 'return -x * 5.69f;'

select:
  - platform: template
    name: Day of week
    id: manual_day
    options:
     - "Off"
     - "Monday"
     - "Tuesday"
     - "Wednesday"
     - "Thursday"
     - "Friday"
     - "Saturday"
     - "Sunday"
    restore_value: true
    optimistic: true
    on_value:
      then:
        - logger.log:
            format: "Chosen option: %s (index %d)"
            args: ["x.c_str()", "i"]
        - if:
            condition:
              lambda: 'return id(manual_day).state == "Monday";'
            then:
              - stepper.set_target:
                  id: my_stepper
                  target: !lambda 'return 292;'
              - globals.set:
                  id: stepper_position
                  value: '292'
        - if:
            condition:
              lambda: 'return id(manual_day).state == "Tuesday";'
            then:
              - stepper.set_target:
                  id: my_stepper
                  target: !lambda 'return 585;'
              - globals.set:
                  id: stepper_position
                  value: '585'
        - if:
            condition:
              lambda: 'return id(manual_day).state == "Wednesday";'
            then:
              - stepper.set_target:
                  id: my_stepper
                  target: !lambda 'return 878;'
              - globals.set:
                  id: stepper_position
                  value: '878'
        - if:
            condition:
              lambda: 'return id(manual_day).state == "Thursday";'
            then:
              - stepper.set_target:
                  id: my_stepper
                  target: !lambda 'return 1170;'
              - globals.set:
                  id: stepper_position
                  value: '1170'
        - if:
            condition:
              lambda: 'return id(manual_day).state == "Friday";'
            then:
              - stepper.set_target:
                  id: my_stepper
                  target: !lambda 'return 1463;'
              - globals.set:
                  id: stepper_position
                  value: '1463'
        - if:
            condition:
              lambda: 'return id(manual_day).state == "Saturday";'
            then:
              - stepper.set_target:
                  id: my_stepper
                  target: !lambda 'return 1755;'
              - globals.set:
                  id: stepper_position
                  value: '1755'
        - if:
            condition:
              lambda: 'return id(manual_day).state == "Sunday";'
            then:
              - stepper.set_target:
                  id: my_stepper
                  target: !lambda 'return 2048;'
              - globals.set:
                  id: stepper_position
                  value: '2048'

stepper:
  - platform: uln2003
    id: my_stepper
    pin_a: D8
    pin_b: D7
    pin_c: D6
    pin_d: D5
    sleep_when_done: true
    max_speed: 250 steps/s
    acceleration: inf
    deceleration: inf
    
sensor:
  - platform: sht3xd
    temperature:
      name: "Back bedroom temperature"
      id: temp1
    humidity:
      name: "Back bedroom humidity"
      id: humidity1
    address: 0x45
    update_interval: 60s

  - platform: absolute_humidity
    name: Back bedroom Absolute Humidity
    temperature: temp1
    humidity: humidity1

  - platform: template
    name: "Back bedroom Dew Point"
    unit_of_measurement: "Â°C"
    lambda: |-
      const float a = 17.27;   // const from https://planetcalc.com/248/
      const float b = 237.7;   // const from https://planetcalc.com/248/
      return ( (b * ( (id(temp1).state * a) / ( b + id(temp1).state) + logf (id(humidity1).state/100) ) )/( a - ( (id(temp1).state * a) / ( b + id(temp1).state) + logf (id(humidity1).state/100) ) ) ); 
