esphome:
  name: esp-a3c76a
  comment: Heliostat-v0.2
  platform: ESP8266
  board: d1_mini

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  - ssid: !secret wifi_ssid2
    password: !secret wifi_password2
  domain: .lan
  ap: {} # This spawns an AP with the device name and mac address with no password.

web_server:
  port: 80
  include_internal: true
  ota: true
  
captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
##############################################
# Config
##############################################
# How to setup this device:
# Step 1 - Put heliostat in approx position with pointer fitted. Turn device on, flash the ESP with your WiFi credentials & location, visit the device's web page
# Step 2 - Click "Goto mid-point". This will put the azimuth and inclination servo's to the mid-position (0.0 on the sliders). Point the device approximately south
# Step 3 - Drag the "uncalibrated" sliders to a few different positions. Record the true compass heading & inclination for a handful of positions between -1.0 and 1.0
# Step 4 - Use linear regression with the true headings\inclinations as 'x' and the servo position as 'y' to calculate the m(slope) and intercept(c) in y=mx+c
# Step 5 - Put the calculated m(slope) and c(intercept) values into the settings below. Re-flash the ESP and test that the "Calibrated" azimuth & inclination controls work.
# Step 6 - Put the device into sun-tracker or heliostat mode depending on your use-case.
##############################################




globals:
  - id: azi_linear_reg_slope
    type: float
    restore_value: no
    initial_value: '-0.01226'
  - id: azi_linear_reg_intercept
    type: float
    restore_value: no
    initial_value: '2.3099'
  - id: inc_linear_reg_slope
    type: float
    restore_value: no
    initial_value: '0.01426'
  - id: inc_linear_reg_intercept
    type: float
    restore_value: no
    initial_value: '-0.9918'  
# Define the safe park location. This position should minimise wind loading on the mirror or solar panel    
  - id: safe_park_azimuth
    type: float
    restore_value: no
    initial_value: '180'
  - id: safe_park_inclination
    type: float
    restore_value: no
    initial_value: '90'   # Pointing straight up (mirror or solar panel horizontal)
##############################################

sensor:
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    icon: mdi:clock-start
    update_interval: 60s

time:
#  - platform: homeassistant
  - platform: sntp
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"

sun:
    id: sunpos
    latitude: !secret my_latitude
    longitude: !secret my_longitude
    on_sunrise:
      - then:
          - logger.log: Good morning!
    on_sunset:
      - then:
          - logger.log: Good night!


##################
# UI elements
##################

select:
  - platform: template
    name: "Mode"
    id: mode_sel
    optimistic: true
    restore_value: true
    options: 
     - Manual
     - Sun tracker
     - Heliostat

button:
  - platform: template
    name: "Goto safe park"
    id: "btn_safe_park"
    icon: mdi:icon7-minus-sign
    on_press:
      then:
        - logger.log: Going to safe park position
        - select.set: # Change mode to 'Manual' otherwise we won't be in safe park position for long...
            id: mode_sel
            option: "Manual"
        - number.set:
            id: azi
            value: !lambda 'return id(safe_park_azimuth);'
        - servo.write:
            id: azi_servo
            level: !lambda 'return id(safe_park_azimuth) * id(azi_linear_reg_slope) + id(azi_linear_reg_intercept);'
        - number.set:
            id: inc
            value: !lambda 'return id(safe_park_inclination);'
        - servo.write:
            id: inc_servo
            level: !lambda 'return id(safe_park_inclination) * id(inc_linear_reg_slope) + id(inc_linear_reg_intercept);'
  - platform: template
    name: "Goto mid-point (South)"
    id: "btn_servo_midpoint"
    icon: mdi:icon7-home
    on_press:
      then:
        - logger.log: Going to servo midpoint position
        - select.set: # Change mode to 'Manual' otherwise we won't be at midpoint position for long...
            id: mode_sel
            option: "Manual"
        - number.set:
            id: azi_raw
            value: 0.0
        - servo.write:
            id: azi_servo
            level: 0.0
        - number.set:
            id: inc_raw
            value: 0.0            
        - servo.write:
            id: inc_servo
            level: 0.0

# If user has used the manual controls to get the light on the target. This should calculate the azi_target & inc_target and set them:
#  - platform: template
#    name: "Target lock-on"
#    id: "btn_target_lock"
#    on_press:
#      then:
#        - logger.log: 
#            format: "Sun azimuth: %.1f, Target azimuth: %.1f, Mirror azimuth: %.1f"
#            args: ['id(sunpos).azimuth()', 'id(azi_target).state', '(id(sunpos).azimuth() + id(azi_target).state) / 2']
#        - logger.log: 
#            format: "Sun elevation: %.1f, Target elevation: %.1f, Mirror elevation: %.1f"
#            args: ['id(sunpos).elevation()', 'id(inc_target).state', '(id(sunpos).elevation() + id(inc_target).state) / 2']
         

number:
  - platform: template
    name: Target Azimuth
    id: azi_target
    min_value: 0
    max_value: 360
    step: 1
    optimistic: true
    restore_value: true

  - platform: template
    name: Target Inclination
    id: inc_target
    min_value: 0
    max_value: 90
    step: 1
    optimistic: true
    restore_value: true

  - platform: template
    name: Uncalibrated Azimuth
    id: azi_raw
    min_value: -1
    max_value: 1
    step: 0.01
    icon: mdi:icon7-resize-horizontal
    set_action:
      then:
        - servo.write:
            id: azi_servo
            level: !lambda 'return x;'

  - platform: template
    name: Uncalibrated Inclination
    id: inc_raw
    min_value: -1
    max_value: 1
    step: 0.01
    icon: mdi:icon7-resize-vertical
    set_action:
      then:
        - servo.write:
            id: inc_servo
            level: !lambda 'return x;'            

  - platform: template
    name: Manual Azimuth
    id: azi
    min_value: 90
    max_value: 270
    step: 1
    mode: box
    set_action:
      then:
        - number.set:
            id: azi_raw
            value: !lambda 'return id(azi_linear_reg_slope) * x + id(azi_linear_reg_intercept);'
        - servo.write:
            id: azi_servo
            level: !lambda 'return id(azi_linear_reg_slope) * x + id(azi_linear_reg_intercept);'

  - platform: template
    name: Manual Inclination
    id: inc
    min_value: 0
    max_value: 90
    step: 1
    mode: box
    set_action:
      then:
        - number.set:
            id: inc_raw
            value: !lambda 'return id(inc_linear_reg_slope) * x + id(inc_linear_reg_intercept);'
        - servo.write:
            id: inc_servo
            level: !lambda 'return id(inc_linear_reg_slope) * x + id(inc_linear_reg_intercept);'


################################
# Equivalent of a scheduled task
################################

interval:
  - interval: 60s
    then:
      - logger.log: 
          format: "Mode: %s, Sun azimuth: %.1f, Sun elevation: %.1f"
          args: ['id(mode_sel).state.c_str()', 'id(sunpos).azimuth()', 'id(sunpos).elevation()']
      - if:
          condition:
            and:
              - lambda: 'return strcmp(id(mode_sel).state.c_str(), "Manual") != 0;' # If mode is 'Sun tracker' or 'Heliostat' and the
              - sun.is_below_horizon:                                               # sun is below horizon then goto 'Safe park' position
          then:
            - servo.write:
                id: azi_servo
                level: !lambda 'return id(safe_park_azimuth) * id(azi_linear_reg_slope) + id(azi_linear_reg_intercept);'
            - servo.write:
                id: inc_servo
                level: !lambda 'return id(safe_park_inclination) * id(inc_linear_reg_slope) + id(inc_linear_reg_intercept);'

      - if:
          condition:
            and:
              - sun.is_above_horizon:
              - lambda: 'return strcmp(id(mode_sel).state.c_str(), "Sun tracker") == 0;' # If mode is 'Sun tracker' then point directly at sun
          then:  
            - servo.write:
                id: azi_servo
                level: !lambda 'return ( id(azi_linear_reg_slope) * id(sunpos).azimuth() ) + id(azi_linear_reg_intercept);'
            - servo.write:
                id: inc_servo
                level: !lambda 'return ( id(inc_linear_reg_slope) * id(sunpos).elevation() ) + id(inc_linear_reg_intercept);'

      - if:
          condition:
            and:
              - sun.is_above_horizon:
              - lambda: 'return strcmp(id(mode_sel).state.c_str(), "Heliostat") == 0;' # If mode is 'Heliostat' then point exactly halfway between sun and target
          then:  
            - servo.write:
                id: azi_servo
                level: !lambda 'return ( id(azi_linear_reg_slope) * (id(sunpos).azimuth() + id(azi_target).state) / 2 ) + id(azi_linear_reg_intercept);'
            - servo.write:
                id: inc_servo
                level: !lambda 'return ( id(inc_linear_reg_slope) * (id(sunpos).elevation() + id(inc_target).state) / 2 ) + id(inc_linear_reg_intercept);'
           



##############################################
# Actual hardware config
##############################################

# Servos on D1 & D2
servo:
  - id: azi_servo
    output: pwm_output1
    auto_detach_time: 1s
    transition_length: 3s
  - id: inc_servo
    output: pwm_output2
    auto_detach_time: 1s
    transition_length: 3s

output:
  - id: led5_output
    platform: gpio
    pin:
      number: D5
      inverted: true
  - id: led6_output
    platform: gpio
    pin:
      number: D6
      inverted: true
  - platform: esp8266_pwm
    id: pwm_output1
    pin: D1
    frequency: 50 Hz
  - platform: esp8266_pwm
    id: pwm_output2
    pin: D2
    frequency: 50 Hz