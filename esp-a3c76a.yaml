esphome:
  name: esp-a3c76a
  comment: Dev
  platform: ESP8266
  board: d1_mini
  includes:
#    - custom_components/lolin_i2c_button.h
    - custom_components/my_custom_sensor.h

#external_components:
#  - source:
#      type: local
#      path: custom_components/empty_i2c_sensor

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  - ssid: !secret wifi_ssid2
    password: !secret wifi_password2
  domain: .lan
  ap: {} # This spawns an AP with the device name and mac address with no password.

  
captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

time:
  - platform: homeassistant

###############

globals:
  - id: last_calibration_pressure
    type: float
    restore_value: no
    initial_value: '1013.25' # Avg atmospheric pressure

button:
  - platform: template
    name: "Start"
    id: "btn_start"
    on_press:
      then:
        - logger.log: Setting calibration pressure


sensor:
- platform: custom
  lambda: |-
    auto my_sensor = new MyCustomSensor();
    App.register_component(my_sensor);
    return {my_sensor};
  sensors:
    name: "My Custom Sensor"
#sensor:
#  - platform: empty_i2c_sensor
#    name: Empty I2C sensor

#  sensors:
#    name: "My Custom Sensor"
#  - platform: homeassistant
#    name: "Outdoor Pressure"
#    entity_id: sensor.illand85_pressure
#    id: outdoor_pressure

i2c:
  scan: true
  scl: D1
  sda: D2


# 0x31 i2c button?




font:
  - file:
      type: gfonts
      family: Roboto
      weight: 700
    id: font1
    size: 14
    
display:
  - platform: ssd1306_i2c
    model: "SSD1306 64x48"
    reset_pin: D0
    address: 0x3C
    lambda: |-
      it.printf(0, 0, id(font1), "%.3f", "Hello!");
#      it.printf(0, 16, id(font1), "%.2fm", 
#        8573.46f * log( id(last_calibration_pressure) / id(pressure1).state)
#      );
